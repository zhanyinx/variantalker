#!/usr/bin/env python
# Generate raw report in csv format

import os
import argparse

from utils import *


def _parse_args():
    """Parse command-line arguments."""
    parser = argparse.ArgumentParser()
    parser.add_argument(
        "-m",
        "--maf",
        type=str,
        default=None,
        required=True,
        help="Maf file",
    )
    parser.add_argument(
        "-t",
        "--tmb",
        type=str,
        default=None,
        required=True,
        help="txt file generated by calculate_tmb.py",
    )
    parser.add_argument(
        "-o",
        "--output",
        type=str,
        default="output.maf",
        help="Output file name, default output.txt",
    )

    args = parser.parse_args()
    return args


def main():
    """Generate raw report in csv format."""
    # Parse input
    args = _parse_args()

    if not os.path.exists(args.maf):
        raise ValueError(f"Maf file {args.maf} does not exist!")

    if not os.path.exists(args.tmb):
        raise ValueError(f"TMB file {args.tmb} does not exist!")

    out = read_maf(args.maf)
    normal_sample = out["Matched_Norm_Sample_Barcode"].unique()[0]
    tumor_sample = out["Tumor_Sample_Barcode"].unique()[0]

    tmb = pd.read_csv(args.tmb, sep=":", header=None)
    tmb = tmb.set_index(0).transpose()
    tmb["file"] = os.path.basename(args.tmb)

    filter_variant_classifications = ["Silent", "Intron", "3'UTR", "5'UTR"]
    out = out[~out["Variant_Classification"].isin(filter_variant_classifications)]

    # format Cancervar evidence
    out[" CancerVar: CancerVar and Evidence "] = out[
        " CancerVar: CancerVar and Evidence "
    ].str.extract(r"([\d]#Tier_[\w\W]+) E")

    # filter cancervar clinkvar escat
    cancervar_keep = ["Tier_II_potential", "Tier_I_strong"]
    clinvar_keep = [
        "Pathogenic/Likely_pathogenic",
        "Pathogenic",
        "Likely_pathogenic",
    ]
    escat_esclude = [
        "IIIA",
        "IIIB",
        "IIIC",
        ".",
    ]

    out = out[
        (out[" CancerVar: CancerVar and Evidence "].isin(cancervar_keep))
        | (out["ClinVar_VCF_CLNSIG"].isin(clinvar_keep))
        | (~(out["ESCAT"].isin(escat_esclude)))
    ]

    keep = [
        "Tumor_Sample_Barcode",
        "Matched_Norm_Sample_Barcode",
        "Hugo_Symbol",
        "HGNC_RefSeq_IDs",
        "Chromosome",
        "Start_Position",
        "End_Position",
        "Variant_Classification",
        "Variant_Type",
        "Reference_Allele",
        "Tumor_Seq_Allele1",
        "Tumor_Seq_Allele2",
        "cDNA_Change",
        "Codon_Change",
        "Protein_Change",
        "Transcript_Exon",
        "tumor_f",
        "t_alt_count",
        "t_ref_count",
        "n_alt_count",
        "n_ref_count",
        "ClinVar_VCF_CLNSIG",
        " CancerVar: CancerVar and Evidence ",
        "ESCAT",
        "ESCAT_TISSUE",
        "ESCAT_CANCER",
        "Otherinfo",
        "cosmic95",
        "Freq_ExAC_ALL",
        "Freq_esp6500siv2_all",
        "Freq_1000g2015aug_all",
        "gnomAD_exome_AF",
    ]
    out = out.loc[:, ~(out == "__UNKNOWN__").all()]  # remove unknown columns
    if len(out):
        out = out[keep]
    else:
        out = pd.DataFrame(
            {
                "Tumor_Sample_Barcode": tumor_sample,
                "Matched_Norm_Sample_Barcode": normal_sample,
            },
            index=[0],
        )

    for colname in tmb.columns:
        out[colname] = tmb[colname].values[0]

    if (
        out["Tumor_Sample_Barcode"].unique().astype(str)[0]
        != os.path.basename(args.tmb).split(".")[1]
    ):
        print(
            out["Tumor_Sample_Barcode"].unique()[0],
            os.path.basename(args.tmb).split(".")[1],
        )
        raise ValueError(
            "Tumor_Sample_Barcode does not match with the tumor sample in the tmb file!"
        )

    out.to_csv(args.output, sep=",", index=False)


if __name__ == "__main__":
    main()
