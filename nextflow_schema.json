{
    "$schema": "http://json-schema.org/draft-07/schema",
    "$id": "https://raw.githubusercontent.com/nf-core/variantalker/master/nextflow_schema.json",
    "title": "variantalker pipeline parameters",
    "description": "variantalker enables users to annotate variants starting from VCF files",
    "type": "object",
    "definitions": {
        "input_output_options": {
            "title": "Input/output options",
            "type": "object",
            "fa_icon": "fas fa-terminal",
            "description": "Define where the pipeline should find input data and save output data.",
            "required": [
                "input",
                "outdir"
            ],
            "properties": {
                "input": {
                    "type": "string",
                    "format": "file-path",
                    "mimetype": "text/csv",
                    "pattern": "^\\S+\\.csv$",
                    "schema": "assets/schema_input.json",
                    "description": "Path to comma-separated file containing information about the samples in the experiment.",
                    "help_text": "You will need to create a design file with information about the samples in your experiment before running the pipeline. Use this parameter to specify its location. It has to be a comma-separated file with 3 columns, and a header row. See [usage docs](https://nf-co.re/variantalker/usage#samplesheet-input).",
                    "fa_icon": "fas fa-file-csv"
                },
                "clonal_tmb_input": {
                    "type": "string",
                    "format": "file-path",
                    "mimetype": "text/csv",
                    "pattern": "^\\S+\\.csv$",
                    "schema": "assets/schema_input.json",
                    "default": null,
                    "description": "Path to comma-separated input file for biomarkers containing information about the samples in the experiment.",
                    "help_text": "You will need to create a design file with information about the samples in your experiment before running the pipeline. Use this parameter to specify its location. It has to be a comma-separated file with 8 columns, and a header row. See [usage docs](https://github.com/zhanyinx/clonal_evolution#input).",
                    "fa_icon": "fas fa-file-csv1"
                },
                "outdir": {
                    "type": "string",
                    "format": "directory-path",
                    "description": "The output directory where the results will be saved. You have to use absolute paths to storage on Cloud infrastructure.",
                    "fa_icon": "fas fa-folder-open"
                }
            }
        },
        "reference_genome_options": {
            "title": "Reference genome options",
            "type": "object",
            "fa_icon": "fas fa-dna",
            "description": "Reference genome related files and options required for the workflow.",
            "properties": {
                "fasta": {
                    "type": "string",
                    "format": "file-path",
                    "mimetype": "text/plain",
                    "pattern": "^\\S+\\.fn?a(sta)?(\\.gz)?$",
                    "description": "Path to FASTA genome file.",
                    "help_text": "This parameter is *mandatory* if `--genome` is not specified.",
                    "fa_icon": "far fa-file-code"
                },
                "build": {
                    "type": "string",
                    "description": "Build of the genome, e.g. hg19, hg38",
                    "help_text": "Build of the genome, e.g. hg19, hg38",
                    "fa_icon": "far fa-build"
                },
                "target": {
                    "type": "string",
                    "format": "file-path",
                    "mimetype": "text/plain",
                    "description": "Path to exome capture bed file.",
                    "help_text": "Provide the bed file with region covered by WES. If WGS, put full chromosome size file with chr, start end",
                    "fa_icon": "far fa-file-target"
                }
            }
        },
        "institutional_config_options": {
            "title": "Institutional config options",
            "type": "object",
            "fa_icon": "fas fa-university",
            "description": "Parameters used to describe centralised config profiles. These should not be edited.",
            "help_text": "The centralised nf-core configuration profiles use a handful of pipeline parameters to describe themselves. This information is then printed to the Nextflow log when you run a pipeline. You should not need to change these values when you run a pipeline.",
            "properties": {
                "custom_config_version": {
                    "type": "string",
                    "description": "Git commit id for Institutional configs.",
                    "default": "master",
                    "hidden": true,
                    "fa_icon": "fas fa-users-cog"
                },
                "custom_config_base": {
                    "type": "string",
                    "description": "Base directory for Institutional configs.",
                    "default": "https://raw.githubusercontent.com/nf-core/configs/master",
                    "hidden": true,
                    "help_text": "If you're running offline, Nextflow will not be able to fetch the institutional config files from the internet. If you don't need them, then this is not a problem. If you do need them, you should download the files from the repo and tell Nextflow where to find them with this parameter.",
                    "fa_icon": "fas fa-users-cog"
                },
                "config_profile_name": {
                    "type": "string",
                    "description": "Institutional config name.",
                    "hidden": true,
                    "fa_icon": "fas fa-users-cog"
                },
                "config_profile_description": {
                    "type": "string",
                    "description": "Institutional config description.",
                    "hidden": true,
                    "fa_icon": "fas fa-users-cog"
                },
                "config_profile_contact": {
                    "type": "string",
                    "description": "Institutional config contact information.",
                    "hidden": true,
                    "fa_icon": "fas fa-users-cog"
                },
                "config_profile_url": {
                    "type": "string",
                    "description": "Institutional config URL link.",
                    "hidden": true,
                    "fa_icon": "fas fa-users-cog"
                }
            }
        },
        "max_job_request_options": {
            "title": "Max job request options",
            "type": "object",
            "fa_icon": "fab fa-acquisitions-incorporated",
            "description": "Set the top limit for requested resources for any single job.",
            "help_text": "If you are running on a smaller system, a pipeline step requesting more resources than are available may cause the Nextflow to stop the run with an error. These options allow you to cap the maximum resources requested by any single job so that the pipeline will run on your system.\n\nNote that you can not _increase_ the resources requested by any job using these options. For that you will need your own configuration file. See [the nf-core website](https://nf-co.re/usage/configuration) for details.",
            "properties": {
                "max_cpus": {
                    "type": "integer",
                    "description": "Maximum number of CPUs that can be requested for any single job.",
                    "default": 8,
                    "fa_icon": "fas fa-microchip",
                    "hidden": true,
                    "help_text": "Use to set an upper-limit for the CPU requirement for each process. Should be an integer e.g. `--max_cpus 1`"
                },
                "max_memory": {
                    "type": "string",
                    "description": "Maximum amount of memory that can be requested for any single job.",
                    "default": "10.GB",
                    "fa_icon": "fas fa-memory",
                    "pattern": "^\\d+(\\.\\d+)?\\.?\\s*(K|M|G|T)?B$",
                    "hidden": true,
                    "help_text": "Use to set an upper-limit for the memory requirement for each process. Should be a string in the format integer-unit e.g. `--max_memory '8.GB'`"
                },
                "max_time": {
                    "type": "string",
                    "description": "Maximum amount of time that can be requested for any single job.",
                    "default": "48.h",
                    "fa_icon": "far fa-clock",
                    "pattern": "^(\\d+\\.?\\s*(s|m|h|day)\\s*)+$",
                    "hidden": true,
                    "help_text": "Use to set an upper-limit for the time requirement for each process. Should be a string in the format integer-unit e.g. `--max_time '2.h'`"
                }
            }
        },
        "databases": {
            "title": "Public databases to use",
            "type": "object",
            "fa_icon": "fab fa-databases-tracker",
            "description": "Select public databases",
            "help_text": "Updated public databases are essential for proper functional annotations. Update frequently your databases.",
            "required": [
                "annovar_db",
                "funcotator_germline_db",
                "funcotator_somatic_db"
            ],
            "properties": {
                "annovar_db": {
                    "type": "string",
                    "format": "directory-path",
                    "description": "Path to the folder containing annovar databases, e.g. humandb",
                    "fa_icon": "fas fa-folder-anno-db"
                },
                "funcotator_germline_db": {
                    "type": "string",
                    "format": "directory-path",
                    "description": "Path to the folder containing funcotator germline databases. e.g. funcotator_dataSources.v1.7.20200521g",
                    "fa_icon": "fas fa-folder-anno-db"
                },
                "funcotator_somatic_db": {
                    "type": "string",
                    "format": "directory-path",
                    "description": "Path to the folder containing funcotator somatic databases. e.g. funcotator_dataSources.v1.7.20200521s",
                    "fa_icon": "fas fa-folder-anno-db"
                },
                "transcript_selection": {
                    "type": "string",
                    "description": "Transcript selection mode.",
                    "default": "BEST_EFFECT",
                    "fa_icon": "fas fa-folder-transcript-sel"
                },
                "funcotator_target": {
                    "type": "string",
                    "description": "target file for funcotator. Keep it null if variant calling has been done with target file.",
                    "default": null,
                    "fa_icon": "fas fa-folder-funcotator-target"
                },
                "target_padding": {
                    "type": "number",
                    "description": "Padding of the target region to avoid problems with 0 or 1 starting bins",
                    "default": 2,
                    "fa_icon": "fas fa-folder-target-padding"
                },
                "alpha_mis_genome_basedir": {
                    "type": "string",
                    "format": "directory-path",
                    "fa_icon": "fas fa-string-alphamissense-fa",
                    "description": "Base folder of alpha missense database files",
                    "help_text": "Path to the folder with alpha missense database files. e.g. path to the downloaded public_databases."
                }
            }
        },
        "filtering": {
            "title": "Filters applied to variant",
            "type": "object",
            "fa_icon": "fab fa-filters-tracker",
            "description": "Filters applied to variant to be kept in the filtered file",
            "help_text": "Filters applied to variant to be kept in the filtered file",
            "properties": {
                "filter_alpha_missense": {
                    "type": "string",
                    "description": "comma separated list of alpha missense classes to keep",
                    "default": "likely_pathogenic,ambiguous",
                    "fa_icon": "fas fa-string-alphamissense-filter"
                },
                "filter_min_depth": {
                    "type": "number",
                    "description": "min depth to keep variant in the filtered output file",
                    "default": 50,
                    "fa_icon": "fas fa-number-mindepth-filter"
                },
                "filter_vaf_threshold": {
                    "type": "number",
                    "description": "min somatic variant allele frequency to keep the variant in the filtered variant output file",
                    "default": 0.01,
                    "fa_icon": "fas fa-number-minvaf-filter"
                },
                "filter_vaf_threshold_germline": {
                    "type": "number",
                    "description": "min germline variant allele frequency to keep the variant in the filtered variant output file",
                    "default": 0.2,
                    "fa_icon": "fas fa-number-minvafg-db-filter"
                },
                "filter_intervar": {
                    "type": "string",
                    "description": "comma separated list of intervar classes to keep",
                    "default": "Pathogenic,Likely pathogenic",
                    "fa_icon": "fas fa-string-intervar-filter"
                },
                "filter_cancervar": {
                    "type": "string",
                    "description": "comma separated list of cancervar classes to keep",
                    "default": "Tier_II_potential,Tier_I_strong",
                    "fa_icon": "fas fa-string-cancervar-filter"
                },
                "filter_civic_evidence_level": {
                    "type": "string",
                    "description": "comma separated list of civic evidence level to keep to keep",
                    "default": "A,B,C",
                    "fa_icon": "fas fa-string-civic-filter"
                },
                "filter_renovo": {
                    "type": "string",
                    "description": "comma separated list of renovo classes to keep",
                    "default": "LP Pathogenic,IP Pathogenic,HP Pathogenic",
                    "fa_icon": "fas fa-string-renovo-filter"
                },
                "filter_genes_somatic": {
                    "type": "string",
                    "format": "file-path",
                    "description": "file with list of Hugo_Symbol genes to be kept",
                    "default": null,
                    "fa_icon": "fas fa-string-filegenesomatic-filter"
                },
                "filter_genes_germline": {
                    "type": "string",
                    "format": "file-path",
                    "description": "file with list of Hugo_Symbol genes to be kept",
                    "default": null,
                    "fa_icon": "fas fa-string-filegenegermline-filter"
                },
                "filter_var_classification": {
                    "type": "string",
                    "format": "file-path",
                    "description": "Filter on variant classification. Available options can be found in Variant Classification here: https://gatk.broadinstitute.org/hc/en-us/articles/360035531732-Funcotator-Annotation-Specifications",
                    "default": "Silent,Intron,3'UTR,5'UTR,IGR,5'Flank,3'Flank,RNA",
                    "fa_icon": "fas fa-string-vclass-filter"
                }
            }
        },
        "generic_options": {
            "title": "Generic options",
            "type": "object",
            "fa_icon": "fas fa-file-import",
            "description": "Less common options for the pipeline, typically set in a config file.",
            "help_text": "These options are common to all nf-core pipelines and allow you to customise some of the core preferences for how the pipeline runs.\n\nTypically these options would be set in a Nextflow config file loaded for all pipeline runs, such as `~/.nextflow/config`.",
            "required": [
                "annovar_software_folder"
            ],
            "properties": {
                "help": {
                    "type": "boolean",
                    "description": "Display help text.",
                    "fa_icon": "fas fa-question-circle",
                    "hidden": true
                },
                "version": {
                    "type": "boolean",
                    "description": "Display version and exit.",
                    "fa_icon": "fas fa-question-circle",
                    "hidden": true
                },
                "publish_dir_mode": {
                    "type": "string",
                    "default": "copy",
                    "description": "Method used to save pipeline results to output directory.",
                    "help_text": "The Nextflow `publishDir` option specifies which intermediate files should be saved to the output directory. This option tells the pipeline what method should be used to move these files. See [Nextflow docs](https://www.nextflow.io/docs/latest/process.html#publishdir) for details.",
                    "fa_icon": "fas fa-copy",
                    "enum": [
                        "symlink",
                        "rellink",
                        "link",
                        "copy",
                        "copyNoFollow",
                        "move"
                    ],
                    "hidden": true
                },
                "email": {
                    "type": "string",
                    "description": "Email address for completion summary.",
                    "fa_icon": "fas fa-exclamation-triangle",
                    "pattern": "^([a-zA-Z0-9_\\-\\.]+)@([a-zA-Z0-9_\\-\\.]+)\\.([a-zA-Z]{2,5})$",
                    "help_text": "An email address to send a summary email to when the pipeline is completed.",
                    "hidden": true
                },
                "email_on_fail": {
                    "type": "string",
                    "description": "Email address for completion summary, only when pipeline fails.",
                    "fa_icon": "fas fa-exclamation-triangle",
                    "pattern": "^([a-zA-Z0-9_\\-\\.]+)@([a-zA-Z0-9_\\-\\.]+)\\.([a-zA-Z]{2,5})$",
                    "help_text": "An email address to send a summary email to when the pipeline is completed - ONLY sent if the pipeline does not exit successfully.",
                    "hidden": true
                },
                "plaintext_email": {
                    "type": "boolean",
                    "description": "Send plain-text email instead of HTML.",
                    "fa_icon": "fas fa-remove-format",
                    "hidden": true
                },
                "max_multiqc_email_size": {
                    "type": "string",
                    "description": "File size limit when attaching MultiQC reports to summary emails.",
                    "pattern": "^\\d+(\\.\\d+)?\\.?\\s*(K|M|G|T)?B$",
                    "default": "25.MB",
                    "fa_icon": "fas fa-file-upload",
                    "hidden": true
                },
                "monochrome_logs": {
                    "type": "boolean",
                    "description": "Do not use coloured log outputs.",
                    "fa_icon": "fas fa-palette",
                    "hidden": true
                },
                "hook_url": {
                    "type": "string",
                    "description": "Incoming hook URL for messaging service",
                    "fa_icon": "fas fa-people-group",
                    "help_text": "Incoming hook URL for messaging service. Currently, MS Teams and Slack are supported.",
                    "hidden": true
                },
                "multiqc_config": {
                    "type": "string",
                    "description": "Custom config file to supply to MultiQC.",
                    "fa_icon": "fas fa-cog",
                    "hidden": true
                },
                "multiqc_logo": {
                    "type": "string",
                    "description": "Custom logo file to supply to MultiQC. File name must also be set in the MultiQC config file",
                    "fa_icon": "fas fa-image",
                    "hidden": true
                },
                "tracedir": {
                    "type": "string",
                    "description": "Directory to keep pipeline Nextflow logs and reports.",
                    "default": "${params.output}/pipeline_info",
                    "fa_icon": "fas fa-cogs",
                    "hidden": true
                },
                "validate_params": {
                    "type": "boolean",
                    "description": "Boolean whether to validate parameters against the schema at runtime",
                    "default": true,
                    "fa_icon": "fas fa-check-square",
                    "hidden": true
                },
                "show_hidden_params": {
                    "type": "boolean",
                    "fa_icon": "far fa-eye-slash",
                    "description": "Show all params when using `--help`",
                    "hidden": true,
                    "help_text": "By default, parameters set as _hidden_ in the schema are not shown on the command line when a user runs with `--help`. Specifying this option will tell the pipeline to show all parameters."
                },
                "pipeline": {
                    "type": "string",
                    "description": "Pipeline from which VCF has been generated: DRAGEN, sarek or iontorrent supported.",
                    "fa_icon": "fas fa-pipe"
                },
                "projectid": {
                    "type": "string",
                    "description": "The project the VCF sample belongs to. Used to add column to maf file so that VCF from sample projects have the same projectid",
                    "default": "test",
                    "fa_icon": "fas fa-proid"
                },
                "analysis": {
                    "type": "string",
                    "description": "Type of analysis to do: annotation (default), biomarkers (beta version)",
                    "default": "annotation",
                    "fa_icon": "fas fa-analysis"
                },
                "tumoronly": {
                    "type": "boolean",
                    "description": "Boolean whether provided somatic VCF are tumor only or rather tumor_normal.",
                    "default": "false",
                    "fa_icon": "fas fa-tumo"
                },
                "cnvkit_threshold": {
                    "type": "string",
                    "description": "Hard thresholds for calling each integer copy number, separated by commas",
                    "default": "-1.1,-0.4,0.3,0.7",
                    "fa_icon": "fas fa-cnvkit-threshold"
                },
                "intervar_input_type": {
                    "type": "string",
                    "description": "Type of vcf input (VCF for single sample VCF, VCF_m for multiple sample VCF)",
                    "default": "VCF",
                    "fa_icon": "fas fa-intervar-in-type"
                },
                "intervar_evidence_file": {
                    "type": "string",
                    "format": "file-path",
                    "description": "Evidence file for InterVar, default null",
                    "default": null,
                    "fa_icon": "fas fa-intervar-evidence"
                },
                "cancervar_input_type": {
                    "type": "string",
                    "description": "Type of vcf input (VCF for single sample VCF, VCF_m for multiple sample VCF)",
                    "default": "VCF",
                    "fa_icon": "fas fa-cancervar-in-type"
                },
                "cancervar_evidence_file": {
                    "type": "string",
                    "format": "file-path",
                    "description": "Evidence file for CancerVar, default null",
                    "default": null,
                    "fa_icon": "fas fa-cancervar-evidence"
                },
                "cnvkit_cellularity": {
                    "type": "number",
                    "description": "Tumor purity used to call interger copy number in cnvkit",
                    "fa_icon": "fas fa-cnvkit-purity"
                },
                "annovar_software_folder": {
                    "type": "string",
                    "format": "directory-path",
                    "description": "Path to the folder containing annovar software",
                    "fa_icon": "fas fa-folder-anno"
                }
            }
        },
        "ascat": {
            "title": "Ascat CNV Calling",
            "type": "object",
            "description": "Configure ascat calling tool",
            "default": "",
            "fa_icon": "fas fa-toolbox",
            "required": [
                "ascat_genome_basedir"
            ],
            "properties": {
                "ascat_genome_basedir": {
                    "type": "string",
                    "fa_icon": "fas fa-greater-than",
                    "description": "Base folder of ascat database files",
                    "help_text": "For more details see [here](https://github.com/zhanyinx/clonal_evolution#readme)"
                },
                "ascat_min_base_qual": {
                    "type": "number",
                    "default": 20,
                    "fa_icon": "fas fa-greater-than",
                    "description": "Overwrite Ascat min base quality required for a read to be counted.",
                    "help_text": "For more details see [here](https://raw.githubusercontent.com/VanLoo-lab/ascat/master/man/ASCAT-manual.pdf)"
                },
                "ascat_min_counts": {
                    "type": "number",
                    "default": 10,
                    "fa_icon": "fas fa-align-center",
                    "description": "Overwrite Ascat minimum depth required in the normal for a SNP to be considered.",
                    "help_text": "For more details, see [here](https://raw.githubusercontent.com/VanLoo-lab/ascat/master/man/ASCAT-manual.pdf)."
                },
                "ascat_min_map_qual": {
                    "type": "number",
                    "default": 35,
                    "fa_icon": "fas fa-balance-scale-left",
                    "description": "Overwrite Ascat min mapping quality required for a read to be counted.",
                    "help_text": "For more details, see [here](https://raw.githubusercontent.com/VanLoo-lab/ascat/master/man/ASCAT-manual.pdf)."
                },
                "ascat_ploidy": {
                    "type": "number",
                    "fa_icon": "fas fa-bacon",
                    "help_text": "ASCAT: optional argument to override ASCAT optimization and supply psi parameter (expert parameter, don\u2019t adapt unless you know what you\u2019re doing). See [here](https://raw.githubusercontent.com/VanLoo-lab/ascat/master/man/ASCAT-manual.pdf)",
                    "description": "Overwrite ASCAT ploidy."
                },
                "ascat_purity": {
                    "type": "number",
                    "fa_icon": "fas fa-broom",
                    "description": "Overwrite ASCAT purity.",
                    "help_text": "Overwrites ASCAT's `rho_manual` parameter. Expert use only, see [here](https://raw.githubusercontent.com/VanLoo-lab/ascat/master/man/ASCAT-manual.pdf) for details.\nRequires that `--ascat_ploidy` is set."
                }
            }
        },
        "pyclone": {
            "title": "pyclone ccf estimation",
            "type": "object",
            "description": "pyclone ccf estimation",
            "default": "",
            "fa_icon": "fas fa-toolbox",
            "properties": {
                "num_restarts": {
                    "type": "number",
                    "default": 20,
                    "fa_icon": "fas fa-greater-than",
                    "description": "Overwrite pyclone-vi number of restarts.",
                    "help_text": "For more details see [here](https://github.com/Roth-Lab/pyclone-vi)"
                },
                "num_clusters": {
                    "type": "number",
                    "default": 40,
                    "fa_icon": "fas fa-align-center",
                    "description": "Overwrite pyclone-vi number of clusters.",
                    "help_text": "For more details, see [here](https://github.com/Roth-Lab/pyclone-vi)."
                }
            }
        }
    },
    "allOf": [
        {
            "$ref": "#/definitions/input_output_options"
        },
        {
            "$ref": "#/definitions/reference_genome_options"
        },
        {
            "$ref": "#/definitions/institutional_config_options"
        },
        {
            "$ref": "#/definitions/max_job_request_options"
        },
        {
            "$ref": "#/definitions/databases"
        },
        {
            "$ref": "#/definitions/pyclone"
        },
        {
            "$ref": "#/definitions/ascat"
        },
        {
            "$ref": "#/definitions/generic_options"
        },
        {
            "$ref": "#/definitions/filtering"
        }
    ]
}