/**************************** Basic parameters ****************************/
process.executor = 'pbspro'
process.queue = 'workq'

singularity.runOptions = ' --bind /hpcnfs/ '


process{
      withName: ascat_calling{
         conda = '' // path to variantalker_clonaltmb conda env
   }
}

// different containers
process {
   withName: germline_renovo_annotation {
      container = 'docker://yinxiu/renovo:latest'
   }
}

params.analysis = 'annotation' // type of analysis: annotation, biomarker, database_update. If not defined, annotation is used
params.build = 'hg38' // hg19 or hg38
params.fasta = '' // genome fasta file
params.pipeline = 'dragen' // dragen, sarek and iontorrent available. 
params.target = '' // target file, if whole genome, put a bed file with chromosome, start end (e.g. chr1 1 248956422)
params.tumoronly = false // true if no normal is present
params.output = "variantalker_output" // default output folder for all annotation, biomarker and report files
params.projectid = "test"


tower {
  enabled = false
}

/**************************** Annotation input file ****************************/
// annovar funcotator databases
params {
   funcotator {
      somatic_db = '' // path to funcotator somatic database, e.g. funcotator_dataSources.v1.7.20200521s
      germline_db = '' // path to funcotator somatic database, e.g. funcotator_dataSources.v1.7.20200521s
   }
   annovar {
      db = '' // path to annovar database, e.g. humandb folder within annovar software
      software_folder = '' // path to annovar software 
   }
}

//cancervar and intervar 
params {
   cancervar {
      evidence_file = '' // Add your own Evidence file for each Variant: evidence file as tab-delimited,format like this: Chr Pos Ref_allele Alt_allele  Evidence_list
      input_type = 'VCF_m' // VCF for single and VCF_m for multiple samples
   }
   intervar {
      evidence_file = '' // Add your own Evidence file for each Variant: evidence file as tab-delimited,format like this: Chr Pos Ref_allele Alt_allele  PM1=1;BS2=1;PP2=0
      input_type = 'VCF' 
   }
}


/* Remove comment if you want to use your own cancervar, intervar and annovar databases and softwares
// DANGER ZONE, modify if you know what you are doing
// optional configs for cancervar and intervar
params{
   cancervar_folder = '' // CancerVar software path folder
   intervar_folder = '' // InterVar software path folder
   cancervar_init = '' // this file must be the same as the one in resources/configs/config.init.CancerVar except for the line database_names = 
   intervar_init = '' // this file must be the same as the one in resources/configs/config.init.intervar except for the line database_names =
   cancervar_db = '' // CancerVar database path folder, e.g. path2/cancervardb
   intervar_db = '' // InterVar database path folder e.g. path2/intervardb
}
// END DANGER ZONE
/*


/**************************** Biomarkers parameters ****************************/
params{
   biomarkers{
      rna{
         input_counts = '' // tsv or list of tsv count files. You can use * as in bash
      }
      dna{
         input_mafs = '' // input maf files, output of annotation
      }
      ascat{
         input = "" // comma separated nf-core/sarek (3.1.2) input file with extra column with cellularity. If cellularity is not present, just add header cellularity (column with no entry)
         config = "" // configuration file to run ascat using nf-core/sarek (https://nf-co.re/sarek). If not defined, it uses the one in resources/configs/ascat.sarek.config
      }
   }
}


/**************************** pipeline specific configurations ****************************/
includeConfig 'config/annotation.config'
includeConfig 'config/biomarker.config'


/**************************** Profiles ****************************/
profiles {
    debug { process.beforeScript = 'echo $HOSTNAME' }
    conda {
        conda.enabled          = true
        charliecloud.enabled   = false
        docker.enabled         = false
        podman.enabled         = false
        shifter.enabled        = false
        singularity.enabled    = false
    }
    docker {
        docker.enabled         = true
        docker.userEmulation   = { params.use_gatk_spark ? false : true }.call()
        charliecloud.enabled   = false
        podman.enabled         = false
        shifter.enabled        = false
        singularity.enabled    = false
        process.container = 'docker://yinxiu/variantalker:v1.0'
        
    }
    singularity {
        singularity.autoMounts = true
        singularity.enabled    = true
        charliecloud.enabled   = false
        docker.enabled         = false
        podman.enabled         = false
        shifter.enabled        = false
        process.container = 'docker://yinxiu/variantalker:v1.0'
    }
}


/**************************** Manifest ****************************************************/

manifest {
    name            = 'variantalker'
    author          = """Yinxiu Zhan, Bastian Eichenberger"""
    homePage        = 'https://github.com/zhanyinx/variantalker'
    description     = """Variant annotation pipeline."""
    mainScript      = 'main.nf'
    nextflowVersion = '!>=22.10.1'
    version         = '1.0.0'
}
