/**************************** Basic parameters ****************************/
process.executor = 'pbspro'
process.queue = 'workq'

singularity.runOptions = ' --bind /hpcnfs/ '


// different containers
process {
   withName: germline_renovo_annotation {
      container = 'docker://yinxiu/renovo:latest'
   }
}

process {
   withName: generate_pyclone {
      container = 'docker://yinxiu/clonal_evolution:latest'
   }
}

process {
   withName: pyclone {
      container = 'docker://yinxiu/clonal_evolution:latest'
   }
}

params {

   // input output
   input                      = null
   output                     = null

   // analysis
   analysis                   = 'annotation' // type of analysis: annotation, biomarker, database_update. If not defined, annotation is used

   // references
   build                      = 'hg38' // hg19 or hg38
   fasta                      = '' // genome fasta file
   pipeline                   = 'dragen' // dragen, sarek and iontorrent available. 
   target                     = '' // target file, if whole genome, put a bed file with chromosome, start end (e.g. chr1 1 248956422)
   tumoronly                  = false // true if no normal is present
   projectid                  = 'test'

   // Boilerplate options
   publish_dir_mode           = 'copy'
   email_on_fail              = null
   plaintext_email            = false
   monochrome_logs            = false
   hook_url                   = null
   help                       = false
   version                    = false
   validate_params            = true
   show_hidden_params         = false
   schema_ignore_params       = 'classifyCNV_folder,renovo_path,classify-CNV_folder,genomes'




   /**************************** Annotation input file ****************************/
   
   // Funcotator params
   transcript_selection = "BEST_EFFECT"
   funcotator_target = 'null' // Target file for funcotator. Recommendation: keep it null if variant calling has been done with target file.
   target_padding = 2 // set to a number so that we do not have problems with 0 or 1 starting bins (e.g. 2)

   // Annovar funcotator databases
   funcotator_somatic_db       = '' // path to funcotator somatic database, e.g. funcotator_dataSources.v1.7.20200521s
   funcotator_germline_db      = '' // path to funcotator somatic database, e.g. funcotator_dataSources.v1.7.20200521s
   
   annovar_db                  = '' // path to annovar database, e.g. humandb folder within annovar software
   annovar_software_folder     = '' // path to annovar software 
   


   // CancerVar and InterVar 
   cancervar_evidence_file     = '' // Add your own Evidence file for each Variant: evidence file as tab-delimited,format like this: Chr Pos Ref_allele Alt_allele  Evidence_list
   cancervar_input_type        = 'VCF' // VCF for single and VCF_m for multiple samples

   intervar_evidence_file      = '' // Add your own Evidence file for each Variant: evidence file as tab-delimited,format like this: Chr Pos Ref_allele Alt_allele  PM1=1;BS2=1;PP2=0
   intervar_input_type         = 'VCF' 

   // CNVKit
   cnvkit_cellularity          = '' // tumor purity
   cnvkit_threshold            = '-1.1,-0.4,0.3,0.7' // Hard thresholds for calling each integer copy number, separated by commas

   // renovo annotation
   renovo_path                 = "/software/renovo/" //path within singularity

   // cnv annotation
   classifyCNV_folder          = '/software/ClassifyCNV' // path within singularity

   // filtering
   filter_min_depth            = 50    // min depth to keep variant in the filtered variant output file
   filter_vaf_threshold        = 0.01  // min somatic variant allele frequency to keep the variant in the filtered variant output file
   filter_vaf_threshold_germline = 0.2 // min germline variant allele frequency to keep the variant in the filtered variant output file
   filter_intervar             = "Pathogenic,Likely pathogenic" // comma separated list of intervar classes to keep
   filter_cancervar            = "Tier_II_potential,Tier_I_strong" // comma separated list of cancervar classes to keep
   filter_renovo               = "LP Pathogenic,IP Pathogenic,HP Pathogenic" // comma separated list of Renovo classes to keep
   filter_genes_somatic        = null // file with list of Hugo_Symbol genes to be kept for somatic sample. 
   filter_genes_germline       = null // file with list of Hugo_Symbol genes to be kept for germline sample. 


   /**************************** Biomarkers parameters ****************************/

   // clonal tmb
   clonal_tmb_input            = null // input file format for clonal TMB calculation. Same input as described here (https://github.com/zhanyinx/clonal_evolution#input)

   // ascat
   ascat_genome_basedir        = "/hpcnfs/scratch/temporary/public_databases" // ascat annotation basedir
   ascat_ploidy                = null  // default value for ASCAT
   ascat_min_base_qual         = 20    // default value for ASCAT
   ascat_min_counts            = 10    // default value for ASCAT
   ascat_min_map_qual          = 35    // default value for ASCAT
   ascat_purity                = null  // default value for ASCAT

   // pyclone
   num_clusters                = 40    // Number of clusters to use in variational approximation distribution. Default is 40.
   num_restarts                = 20    // Number random restarts of Variational inference. Default is 20.
}


/**************************** Profiles ****************************/
profiles {
    debug { process.beforeScript = 'echo $HOSTNAME' }
    conda {
        conda.enabled          = true
        charliecloud.enabled   = false
        docker.enabled         = false
        podman.enabled         = false
        shifter.enabled        = false
        singularity.enabled    = false
    }
    docker {
        docker.enabled         = true
        docker.userEmulation   = { params.use_gatk_spark ? false : true }.call()
        charliecloud.enabled   = false
        podman.enabled         = false
        shifter.enabled        = false
        singularity.enabled    = false
        process.container = 'docker://yinxiu/variantalker:v1.0'
        
    }
    singularity {
        singularity.autoMounts = true
        singularity.enabled    = true
        charliecloud.enabled   = false
        docker.enabled         = false
        podman.enabled         = false
        shifter.enabled        = false
        process.container = 'docker://yinxiu/variantalker:v1.0'
    }
}


/**************************** Manifest ****************************************************/

manifest {
    name            = 'variantalker'
    author          = """Yinxiu Zhan, Bastian Eichenberger"""
    homePage        = 'https://github.com/zhanyinx/variantalker'
    description     = """Variant annotation pipeline."""
    mainScript      = 'main.nf'
    nextflowVersion = '!>=22.10.1'
    version         = '1.0.0'
}

/**************************** Configs ****************************************************/
includeConfig 'config/ascat.config'
includeConfig 'config/genomes.config'
includeConfig 'config/base.config'

/**************************** Tower ****************************************************/
tower {
  enabled = false
}




// Function to ensure that resource requirements don't go beyond
// a maximum limit
def check_max(obj, type) {
    if (type == 'memory') {
        try {
            if (obj.compareTo(params.max_memory as nextflow.util.MemoryUnit) == 1)
                return params.max_memory as nextflow.util.MemoryUnit
            else
                return obj
        } catch (all) {
            println "   ### ERROR ###   Max memory '${params.max_memory}' is not valid! Using default value: $obj"
            return obj
        }
    } else if (type == 'time') {
        try {
            if (obj.compareTo(params.max_time as nextflow.util.Duration) == 1)
                return params.max_time as nextflow.util.Duration
            else
                return obj
        } catch (all) {
            println "   ### ERROR ###   Max time '${params.max_time}' is not valid! Using default value: $obj"
            return obj
        }
    } else if (type == 'cpus') {
        try {
            return Math.min( obj, params.max_cpus as int )
        } catch (all) {
            println "   ### ERROR ###   Max cpus '${params.max_cpus}' is not valid! Using default value: $obj"
            return obj
        }
    }
}